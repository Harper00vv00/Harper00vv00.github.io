{"meta":{"title":"Eloise Wang","subtitle":"个人主页","description":"","author":"Eloise_W","url":"https://Harper00vv00/Harper00vv00.github.io","root":"/"},"pages":[{"title":"about","date":"2022-09-04T15:13:32.000Z","updated":"2022-09-04T15:20:18.960Z","comments":true,"path":"about/index.html","permalink":"https://harper00vv00/Harper00vv00.github.io/about/index.html","excerpt":"","text":"profile: avater: #头像 career: 打工人 introduction： 一技之长，衣食无忧 my Projects: enable: false my Skills: enable: true data: cpp: background: ‘linear-gradient(to right, #9900FF 0%, #CC66FF 100%)’ percent: 80% my Gallery: #相册 enable: false"},{"title":"tags","date":"2022-09-04T15:20:33.000Z","updated":"2022-09-04T15:21:33.872Z","comments":true,"path":"tags/index.html","permalink":"https://harper00vv00/Harper00vv00.github.io/tags/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-09-04T15:26:34.000Z","updated":"2022-09-04T15:28:51.838Z","comments":true,"path":"contact/index.html","permalink":"https://harper00vv00/Harper00vv00.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2022-09-04T15:26:50.000Z","updated":"2022-09-04T15:29:12.928Z","comments":true,"path":"friends/index.html","permalink":"https://harper00vv00/Harper00vv00.github.io/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-09-04T15:27:32.000Z","updated":"2022-09-04T15:28:29.097Z","comments":true,"path":"categories/index.html","permalink":"https://harper00vv00/Harper00vv00.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"DP Day2","slug":"DP-Day2","date":"2022-09-06T14:02:27.000Z","updated":"2022-09-07T12:34:43.006Z","comments":true,"path":"2022/09/06/DP-Day2/","link":"","permalink":"https://harper00vv00/Harper00vv00.github.io/2022/09/06/DP-Day2/","excerpt":"DP“最小路径和”问题","text":"累累累累","categories":[{"name":"C++","slug":"C","permalink":"https://harper00vv00/Harper00vv00.github.io/categories/C/"}],"tags":[{"name":"-LeetCode -C++ -DP","slug":"LeetCode-C-DP","permalink":"https://harper00vv00/Harper00vv00.github.io/tags/LeetCode-C-DP/"}]},{"title":"DP Day1","slug":"DP-Day1","date":"2022-09-06T14:02:04.000Z","updated":"2022-09-07T13:43:29.267Z","comments":true,"path":"2022/09/06/DP-Day1/","link":"","permalink":"https://harper00vv00/Harper00vv00.github.io/2022/09/06/DP-Day1/","excerpt":"DP最基础的“不同路径”问题","text":"##第一题##一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。问总共有多少条不同的路径？链接：https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtwu06/ 初步的思路：3*7的地图，只能向右或者向下，总共走8步可以到终点，那么就要考虑右和下这两个动作在向量里的位置。如下图所示，需要向右6步，向下2步，那么就计算2个下元素在向量中的位置（无序）。 第一个“下”的位置 第二个“下”的可能 0 7 1 6 2 5 。。 。。 6 1 最后求和，得7*8&#x2F;2&#x3D;28不过这种思路很难找到通用的公式（哭） 直接看解析！有人使用递归来解决，递归的关键是1.找到函数关系（把范围变小）2.找到递归结束条件对于这道题来说，范围变小：每移动一步，地图就变小了 本讲重要知识点###动态规划（DP）###是什么？若要解一个给定问题，我们需要解其不同部分（即子问题），再合并子问题的解以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量： 一旦某个给定子问题的解已经算出，则将其记忆化存储，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。以下是作者宫水三叶对原题的分析定义 f[i][j]f[i][j] 为到达位置 (i,j)(i,j) 的不同路径数量。那么 f[m-1][n-1]f[m−1][n−1] 就是我们最终的答案，而 f[0][0] &#x3D; 1是一个显而易见的起始条件。由于题目限定了我们只能往下或者往右移动，因此我们按照当前可选方向进行分析：当前位置只能「往下」移动，即有 f[i][j] &#x3D; f[i-1][j]当前位置只能「往右」移动，即有 f[i][j] &#x3D; f[i][j-1]当前位置即能「往下」也能「往右」移动，即有 f[i][j] &#x3D; f[i][j-1] + f[i-1][j] 因为是好久没接触DP类型的题目，基本忘光，这里直接搬上作者对于这道题的总结 我们是如何确定本题可以使用动态规划来解决的？通常我们要从「有无后效性」进行入手分析。如果对于某个状态，我们可以只关注状态的值，而不需要关注状态是如何转移过来的话，那么这就是一个无后效性的问题，可以考虑使用 DP 解决。另外一个更加实在的技巧，我们还可以通过数据范围来猜测是不是可以用 DP来做。因为DP是一个递推的过程，因此如果数据范围是 10^510^6 的话，可以考虑是不是可以使用一维 DP来解决；如果数据范围是 10^210^3 的话，可以考虑是不是可以使用二维 DP 来做 … 我们是如何确定本题的状态定义的？说实话，DP 的状态定义很大程度是靠经验去猜的。虽然大多数情况都是猜的，但也不是毫无规律，相当一部分题目的状态定义是与「结尾」或「答案」有所关联 我们是如何确定状态转移方程的？通常来说，如果我们的状态定义猜对了，状态转移方程就是对「最后一步的分情况讨论」。如果我们有一个对的状态定义的话，基本上状态转移方程就是呼之欲出。因此一定程度上，状态转移方程可以反过来验证我们状态定义猜得是否正确：如果猜了一个状态定义，然后发现无法列出涵盖所有情况（不漏）的状态转移方程，多半就是状态定义猜错了，赶紧换个思路，而不是去死磕状态转移方程。 对状态转移的要求是什么？我们的状态转移是要做到「不漏」还是「不重不漏」取决于问题本身：如果是求最值的话，我们只需要确保「不漏」即可，因为重复不影响结果。如果是求方案数的话，我们需要确保「不重不漏」。 我们是如何分析动态规划的时间复杂度的？对于动态规划的复杂度&#x2F;计算量分析，有多少个状态，复杂度&#x2F;计算量就是多少。因此一维DP的复杂度通常是线性的 O(n) ，而二维DP的复杂度通常是平方的 O(n^2)。 ##第二题一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？网格中的障碍物和空位置分别用 1 和 0 来表示。 第二题是对第一题的巩固，就自己按第一题的思路做了一下。以下是自己写的代码，注释是当时的思路和错误的地方： 123456789101112131415161718192021222324252627282930313233343536class Solution &#123;public: int uniquePathsWithObstacles(vector&lt;vector&lt;int&gt;&gt;&amp; obstacleGrid) &#123; int i; int m = obstacleGrid.size(); int n = obstacleGrid[i].size(); int f[m][n]; //memset(f,-1,sizeof(f));//加不加对编译没有影响，但不初始化很危险 f[0][0]=(obstacleGrid[0][0]==0)?1:0;//漏初始条件 for(int i=0;i&lt;m;i++) &#123; for(int j=0;j&lt;n;j++) &#123; if(obstacleGrid[i][j]==1) f[i][j]=0; if(obstacleGrid[i][j]==0) &#123; if(i&gt;0&amp;&amp;j&gt;0) f[i][j]=f[i-1][j]+f[i][j-1]; else if(i&gt;0) f[i][j]=f[i-1][j];//右，注意条件，j=0表示只能向右 else if(j&gt;0) f[i][j]=f[i][j-1];//下 &#125; &#125; &#125; return f[m-1][n-1]; &#125;&#125;;//f[i][j]://1,o[i-1][j]=1--f[i][j]=f[i][j-1]//2,o[i][j-1]=1--f[i][j]=f[i-1][j]//3,o[i-1][j-1]=0--f[i][j]=f[i][j-1]+f[i-1][j]//4,o[i-1][j-1]=1--f[i][j]=0//一开始的构思，漏洞百出。。。//注意vector的格式，二维数组初始化//一定要清晰定义f[m][n]//当前的状态去推导下一时刻状态，因此不管怎么样等式右边都是x-m（表示过去）的形式，等式左边就是x（当前）","categories":[{"name":"C++","slug":"C","permalink":"https://harper00vv00/Harper00vv00.github.io/categories/C/"}],"tags":[{"name":"-LeetCode -C++ -DP","slug":"LeetCode-C-DP","permalink":"https://harper00vv00/Harper00vv00.github.io/tags/LeetCode-C-DP/"}]},{"title":"累了就休息一下，看一点人间喜剧","slug":"累了就休息一下，看一点人间喜剧","date":"2022-09-04T09:01:52.000Z","updated":"2022-09-06T14:52:01.828Z","comments":true,"path":"2022/09/04/累了就休息一下，看一点人间喜剧/","link":"","permalink":"https://harper00vv00/Harper00vv00.github.io/2022/09/04/%E7%B4%AF%E4%BA%86%E5%B0%B1%E4%BC%91%E6%81%AF%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%9C%8B%E4%B8%80%E7%82%B9%E4%BA%BA%E9%97%B4%E5%96%9C%E5%89%A7/","excerpt":"","text":"叔叔你别拉了，我害怕https://www.douban.com/group/topic/220795011/?_i=622889837471b5d&amp;dt_dapp=1","categories":[{"name":"乐一乐","slug":"乐一乐","permalink":"https://harper00vv00/Harper00vv00.github.io/categories/%E4%B9%90%E4%B8%80%E4%B9%90/"}],"tags":[{"name":"-社死 -豆瓣","slug":"社死-豆瓣","permalink":"https://harper00vv00/Harper00vv00.github.io/tags/%E7%A4%BE%E6%AD%BB-%E8%B1%86%E7%93%A3/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-09-02T08:43:11.024Z","updated":"2022-09-02T08:43:11.024Z","comments":true,"path":"2022/09/02/hello-world/","link":"","permalink":"https://harper00vv00/Harper00vv00.github.io/2022/09/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"C++","slug":"C","permalink":"https://harper00vv00/Harper00vv00.github.io/categories/C/"},{"name":"乐一乐","slug":"乐一乐","permalink":"https://harper00vv00/Harper00vv00.github.io/categories/%E4%B9%90%E4%B8%80%E4%B9%90/"}],"tags":[{"name":"-LeetCode -C++ -DP","slug":"LeetCode-C-DP","permalink":"https://harper00vv00/Harper00vv00.github.io/tags/LeetCode-C-DP/"},{"name":"-社死 -豆瓣","slug":"社死-豆瓣","permalink":"https://harper00vv00/Harper00vv00.github.io/tags/%E7%A4%BE%E6%AD%BB-%E8%B1%86%E7%93%A3/"}]}