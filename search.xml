<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DP-Day4</title>
      <link href="/2022/09/15/DP-Day4/"/>
      <url>/2022/09/15/DP-Day4/</url>
      
        <content type="html"><![CDATA[<p><font face="微软雅黑" size="6" color="#A52A2A">第一题</font><br>给你一个<em>互不相同</em>的整数数组，其中&nbsp;locations[i]&nbsp;表示第&nbsp;i&nbsp;个城市的位置。<br>同时给你&nbsp;start，finish&nbsp;和&nbsp;fuel&nbsp;分别表示出发城市、目的地城市和你初始拥有的汽油总量<br>每一步中，如果你在城市 i&nbsp;，你可以选择任意一个城市 j&nbsp;，满足 &nbsp;j != i&nbsp;且&nbsp;0 &lt;= j &lt; locations.length&nbsp;，并移动到城市&nbsp;j&nbsp;。<br>从城市&nbsp;i&nbsp;移动到&nbsp;j&nbsp;消耗的汽油量为&nbsp;|locations[i] - locations[j]|，|x|&nbsp;表示&nbsp;x&nbsp;的绝对值。<br>请注意，&nbsp;fuel&nbsp;任何时刻都&nbsp;不能&nbsp;为负，且你&nbsp;可以&nbsp;经过任意城市超过一次（包括&nbsp;start&nbsp;和&nbsp;finish&nbsp;）。<br>请你返回从&nbsp;start&nbsp;到&nbsp;finish&nbsp;所有可能路径的数目。<br>由于答案可能很大， 请将它对&nbsp;10^9 + 7&nbsp;取余后返回。<br><img src="/images/DP-Day4/1.png" alt="题目"><br><a href="https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/r8pzo1/">链接在这里</a></p><hr><p><strong>原思路</strong><br>定义变量：b、e分别表示每一次移动的起点与终点，每次移动step步</p><p><strong>对比作者的思路</strong><br>路径问题-&gt;DFS-&gt;DFS问题为指数级别复杂度-&gt;记忆化搜索</p><p><font color="#FF0000" size="5">实现DFS的通常步骤</font><br>1、设计好递归函数的「入参」和「出参」<br>2、设置好递归函数的出口（Base Case）<br>3、编写「最小单元」处理逻辑<br>其中，最重要的是要找出Base Case，也就是确定<strong>在什么情况下，算一次有效/无效</strong><br>本题的有效情况：当前所在位置为finish<br>本题无效情况：1、油量消耗完，且当前位置不在finish 2、油量不为0，但无法移动到任何位置<br>接着，添加<strong>记忆化搜索</strong><br>记忆化搜索就是使用变量（通常是数组）记录当前状态，也就是中间结果<br>我们用 cache[i][fuel] 代表从位置 i 出发，当前剩余的油量为 fuel 的前提下，到达<table><tbody><tr><td bgcolor="7FFFD4">目标位置</td></tr></tbody></table>的「路径数量」。<br>之所以能采取「缓存中间结果」这样的做法，是因为「在 i 和 fuel 确定的情况下，其到达目的地的路径数量是<table><tbody><tr><td bgcolor="#FFD700">唯一确定</td></tr></tbody></table>的」。<br><em>与自己的思路区别：作者的中间状态（最小单元）有2个变量：fuel和起点，也就是自己定义的step和b<br>比自己定义的中间状态少了一个变量<br>自己定义的三维数组存储的是</em><strong>是否存在路径</strong>*<br>而作者定义的二维数组存储了<em><strong>成立的路径数量</strong></em><br>我想作者如此定义中间状态的原因主要参考了本题的有效情况（到达finish）和所需output<br>所以以后定义中间状态变量时遇到维度过多的情况，可以考虑使用“数量”代替“存在”，利用变量的取值减少一个维度*</p><table><tbody><tr><td bgcolor="#1E90FF">DFS（深度优先搜索）的框架</td></tr></tbody></table><pre><code>function dfs(当前状态){    if(当前状态 == 目的状态){        ···    }    for(···寻找新状态){        if(状态合法){            vis[访问该点]；            dfs(新状态);            ?是否需要恢复现场-&gt;vis[恢复访问]        }     }    if(找不到新状态){        ···    }}//CSDN博主「HeartFireY」的原创文章//原文链接：https://blog.csdn.net/yanweiqi1754989931/article/details/109603384//制作很精美的博文（DFS介绍）</code></pre><p><strong>作者宫水三叶的代码</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 缓存器：用于记录「特定状态」下的结果</span>    <span class="token comment" spellcheck="true">// cache[i][fuel] 代表从位置 i 出发，当前剩余的油量为 fuel 的前提下，到达目标位置的「路径数量」</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 初始化缓存器</span>        <span class="token comment" spellcheck="true">// 之所以要初始化为 -1</span>        <span class="token comment" spellcheck="true">// 是为了区分「某个状态下路径数量为 0」和「某个状态尚未没计算过」两种情况</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fuel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**     * 计算「路径数量」     * @param ls 入参 locations     * @param u 当前所在位置（ls 的下标）     * @param end 目标哦位置（ls 的下标）     * @param fuel 剩余油量     * @return 在位置 u 出发，油量为 fuel 的前提下，到达 end 的「路径数量」     */</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果缓存器中已经有答案，直接返回————记忆化搜索</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// base case 1：如果油量为 0，且不在目标位置</span>        <span class="token comment" spellcheck="true">// 将结果 0 写入缓存器并返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> u <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token comment" spellcheck="true">// base case 2：油量不为 0，且无法到达任何位置</span>        <span class="token comment" spellcheck="true">// 将结果 0 写入缓存器并返回</span>        <span class="token keyword">boolean</span> hasNext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> need <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">>=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    hasNext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> u <span class="token operator">==</span> end <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 计算油量为 fuel，从位置 u 到 end 的路径数量</span>        <span class="token comment" spellcheck="true">// 由于每个点都可以经过多次，如果 u = end，那么本身就算一条路径</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> u <span class="token operator">==</span> end <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> need <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">>=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> i<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fuel <span class="token operator">-</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sum <span class="token operator">%=</span> mod<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font size="5">简化Base Case</font><br>简化Base Case就是要深入挖掘有/无效情况<br>原先定义的无效情况：下一步（是一步）无法达到finish<br>其实，如果当前位置经计算无法达到finish，那么任移动几步都无法达到finish<br>代码变化：</p><pre class="line-numbers language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// 如果一步到达不了，说明从位置 u 不能到达 end 位置</span>        <span class="token comment" spellcheck="true">// 将结果 0 写入缓存器并返回</span>        <span class="token keyword">int</span> need <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">></span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//上述代码将替换原先两个Base Case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font face="微软雅黑" size="4" color="#0000FF">进阶:动态规划求解</font><br><span class="github-emoji"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>如何将本题使用<font color="#FF0000">动态规划</font>的方式求解？<br><strong>任何「记忆化搜索」都能改成「动态规划」。</strong></p><table><tbody><tr><td bgcolor="#1E90FF">如何直接将「记忆化搜索」改成「动态规划」。</td></tr></tbody></table>使用这种技巧，你将不需要去猜「状态定义」和根据「状态定义」推导「状态转移方程」。1、关注DFS函数的参数```int dfs(int[] ls, int u, int end, int fuel) {}```其中，ls(location)和end(finish)在DFS过程中不会改变而u和fuel分别表示当前位置和当前油量，是<font color="#FF0000">可变参数</font>那么，定义二维数组f，分别表示两个可变参数第一维代表当前位置，第二维代表剩余油量数组存储DFS的返回值（路径数量）<p>2、翻译出「状态转移方程」<br>第一步的“翻译”工作后，我们得到了「动态规划」的「状态定义」。<br>所谓的「状态转移方程」其实就是指如何从一个状态转移到另外一个状态。<br>而我们的 DFS 主逻辑就是完成这个转移的。<br>DFS 中的主逻辑很简单：枚举所有的位置，看从当前位置 u 出发，可以到达的位置有哪些。<br>于是我们很容易就可以得出状态转移方程：<br>f[i][fuel]=f[i][fuel]+f[k][fuel-need]<br>k 代表计算位置 i 油量 fuel 的状态时枚举的「下一位置」，need 代表从 i 到达 k 需要的油量。<br> i 和 k 并无严格的大小关系，而 fuel 和 fuel-need 具有严格的大小关系（fuel ≥ fuel−need）。<br>因此我们需要先从小到大枚举油量这一维。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// f[i][j] 代表从位置 i 出发，当前油量为 j 时，到达目的地的路径数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 对于本身位置就在目的地的状态，路径数为 1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> fuel<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从状态转移方程可以发现 f[i][fuel]=f[i][fuel]+f[k][fuel-need]</span>        <span class="token comment" spellcheck="true">// 在计算 f[i][fuel] 的时候依赖于 f[k][fuel-need]</span>        <span class="token comment" spellcheck="true">// 其中 i 和 k 并无严格的大小关系</span>        <span class="token comment" spellcheck="true">// 而 fuel 和 fuel-need 具有严格大小关系：fuel >= fuel-need</span>        <span class="token comment" spellcheck="true">// 因此需要先从小到大枚举油量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cur <span class="token operator">&lt;=</span> fuel<span class="token punctuation">;</span> cur<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> need <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">>=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span>need<span class="token punctuation">]</span><span class="token punctuation">;</span>                            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作者：宫水三叶</span><span class="token comment" spellcheck="true">//链接：https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/r8n0h2/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong><br>整个过程：<br>1、从 DFS 方法签名出发。分析哪些入参是可变的，将其作为 DP 数组的<font color="#FF0000">维度</font>；将返回值作为 DP 数组的<font color="#FF0000">存储值</font>。<br>2、从 DFS 的主逻辑可以抽象中单个状态的计算方法。</p><p>其中第一点对应了「动态规划」的「状态定义」，第二点对应了「动态规划」的「状态方程转移」。</p><p>作者对这几章练习的小结<br>两种求解「动态规划」问题的方法：<br>1、根据经验猜一个「状态定义」，然后根据「状态定义」去推导一个「状态转移方程」。<br>2、先写一个「记忆化搜索」解法，再将「记忆化搜索」改写成「动态规划」。</p><p>能够去猜「状态定义」或者使用「记忆化搜索」求解，都有一个大前提：<strong>问题本身具有无效性。</strong></p><p>如果遇到一道你从来没接触过的题目时，建议先想想「记忆化搜索」该如何实现，然后反推出「动态规划」。<br>这里说的想想「记忆化搜索」该如何实现，不需要真正动手实现一个「记忆化搜索」解法，<br>而只需要想清楚，如果使用「记忆化搜索」的话，我的 DFS 函数参数和返回值如何设计即可。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> 记忆化搜索 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP-Day3</title>
      <link href="/2022/09/14/DP-Day3/"/>
      <url>/2022/09/14/DP-Day3/</url>
      
        <content type="html"><![CDATA[<p><font face="微软雅黑" size="6" color="#A52A2A">第一题</font><br>给你一个 n x n 的<em>方形</em>整数数组&nbsp;matrix ，请你找出并返回通过 matrix 的<strong>下降路径</strong>的<strong>最小和</strong>。<br>下降路径可以从第一行中的任何元素开始，并从每一行中选择一个元素。<br>在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。<br>具体来说，位置 (row, col) 的下一个元素应当是 (row + 1, col - 1)、(row + 1, col) 或者 (row + 1, col + 1) 。<br><img src="/images/DP-Day3/1.jpg" alt="下降最小路径和1"><br><a href="https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/r85adr/">链接在这里！</a></p><hr><p><strong>思路</strong>：蛮简单的感觉，用上一道题的方法，直接更改matrix，节约空间（但是直接更改原数据十分危险）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minFallingPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//矩阵的行、列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> lft<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>rht<span class="token punctuation">;</span>                lft<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span>matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span>INT_MAX<span class="token punctuation">;</span>                mid<span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                rht<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">?</span>matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">:</span>INT_MAX<span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>lft<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>rht<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到最后一行最小的路径值</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font face="微软雅黑" size="4" color="#0000FF">原作者宫水三叶的解析</font><br>其实细看可以发现，自己的解法相当于作者<strong>动态规划（基于定义）</strong>的解法<br>还有一个复杂度较高的解法：</p><blockquote><p><font color="#FF0000" size="4">基于起点</font>解法的原理：<br>起点任选，每一个起点都存在最小路径，那么相当于把问题拆分成两步<br>1、找到一个起点u的最小路径——find函数<br>2、遍历所有找到的最小路径，找出最小点——for(遍历所有u){find(u,)}<br>整套算法时间复杂度O(n^3)</p></blockquote><p>那么就从理论上学习一下自己写的代码吧！<br><font color="#FF0000" size="4">动态规划（基于定义）</font><br>观察上一个解法的步骤：1、枚举起点 2、DP求最小路径和(find函数)<br>DP的复杂程度无法优化，那么我们选择优化枚举的过程</p><blockquote><p>直接从 DP 定义出发，进行转移即可。<br>定义 f[i][j]为到达位置 (i,j) 的最小路径和。<br>那么最终答案为所有 f[n-1][i]的最小值，i的取值范围为 [0,n)。<br>代表最小路径的结尾可能是最后一行的任意位置。</p></blockquote><hr><p><font face="微软雅黑" size="6" color="#A52A2A">第二题</font><br>给你一个&nbsp;n x n 整数矩阵&nbsp;arr&nbsp;，请你返回 非零偏移下降路径 数字和的最小值。<br>非零偏移下降路径 定义为：从&nbsp;arr 数组中的每一行选择一个数字，且按顺序选出来的数字中，相邻数字不在原数组的同一列。<br><img src="/images/DP-Day3/2.png" alt="下降路径最小和2"></p><p><em>代码最后的注释包含了本人做这题的心路历程，其实这题很简单</em></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">*</span>n<span class="token operator">+</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">/</span>n<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意整除符号不要写成转义符号！</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getCol</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">%</span>n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">minFallingPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> g<span class="token punctuation">[</span>n<span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> min<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>                    <span class="token keyword">int</span> wih<span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> wht<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>wht<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>wht<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>wht<span class="token operator">==</span>j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>wht<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span> <span class="token punctuation">{</span>min<span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>wht<span class="token punctuation">]</span><span class="token punctuation">;</span>wih<span class="token operator">=</span>wht<span class="token punctuation">;</span><span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    g<span class="token punctuation">[</span><span class="token function">getId</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">getId</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span>wih<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">/*else if(j==0) f[i][j]=f[i-1][j+1]+grid[i][j];//rht                else if(j==n-1) f[i][j]=f[i-1][j-1]+grid[i][j];//left                else                 {                    int left=f[i-1][j-1]+grid[i][j];                    int rht=f[i-1][j+1]+grid[i][j];                    f[i][j]=min(left,rht);                }                */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//find min</span>        <span class="token keyword">int</span> min<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                min<span class="token operator">=</span>f<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                num<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//print(reverse)</span>        <span class="token keyword">int</span> row<span class="token punctuation">;</span>        <span class="token keyword">int</span> col<span class="token punctuation">;</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> id<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                id<span class="token operator">=</span><span class="token function">getId</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                row<span class="token operator">=</span><span class="token function">getRow</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                col<span class="token operator">=</span><span class="token function">getCol</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                id<span class="token operator">=</span>g<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>                row<span class="token operator">=</span><span class="token function">getRow</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                col<span class="token operator">=</span><span class="token function">getCol</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*输出：看懂别人写的和自己复现是完全不一样的错误：真的不知道哪里出错，也遇到了评论区的问题“自己进入了个思路误区：dp[i][j] 更新为了上一层对应得坐标加上当前层得最小值， 正确得应该是上一层得最小值，加上当前层的值得最小更新dp[i][j]”，但改了还是出错，和原来没区别好吧，题目理解错了，不是只能取相邻的点反思：忘记了前几天的滚动数组，果然还是不能偷懒，要用hexo记录*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font face="微软雅黑" size="4" color="#0000FF">原作者宫水三叶的解析</font><br>如何简化这个问题？<br>同样按照上一道题的步骤<br><strong>首先拆分解法的步骤</strong><br>1、DP状态转移，共需转移n*n个状态<br>2、转移时需要枚举上一行的所有列<br>因为DP无法优化，所以只能优化第二步。<br><em>那怎么优化枚举呢</em><br>细想就可以发现，当我们在计算某行的状态值的时候，只会用到「上一行」的两个值:<em>最小值</em>和<em>次小值</em>。<br>因为我们只需要最小和，但考虑到前后元素不能有相同的列数，所以当前[i,j]位置最小的路径只考虑最小值和次小值即可<br><img src="/images/DP-Day3/3.png" alt="示意图"></p><p><em><strong>看对应代码</strong></em></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minFallingPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (i,j)位置在原问题的解</span>        <span class="token keyword">int</span> pos1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上一行最小及次小值所在的列</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>pos1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当前值小于等于最小值时,同时更新pos1和pos2</span>                pos2 <span class="token operator">=</span> pos1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处应该先更新pos2,然后更新pos1</span>                pos1 <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>pos2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//当前值大于最小值,小于次小值时,更新pos2</span>                pos2 <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> pos1 <span class="token operator">?</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos1<span class="token punctuation">]</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pos1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需重置 计算当前行数字和最小及次小所在的列</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>pos1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    pos2 <span class="token operator">=</span> pos1<span class="token punctuation">;</span>                    pos1 <span class="token operator">=</span> j<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>pos2 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    pos2 <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//感谢热心作者：秦时明月</span><span class="token comment" spellcheck="true">//链接：https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/r8obm3/?discussion=rQGrX1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信文件过期solution</title>
      <link href="/2022/09/10/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/"/>
      <url>/2022/09/10/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/</url>
      
        <content type="html"><![CDATA[<p>cr.豆瓣句号小组<br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/1.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/2.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/3.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/4.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/5.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/6.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/7.jpg"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E8%BF%87%E6%9C%9Fsolution/8.jpg"></p><p>【ps】由于句号组的帖子很容易殉o(╥﹏╥)o，所以都截图保存了<br>感谢原作者桃子老师的分享~</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 豆瓣 </tag>
            
            <tag> 实用技巧 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP Day2</title>
      <link href="/2022/09/06/DP-Day2/"/>
      <url>/2022/09/06/DP-Day2/</url>
      
        <content type="html"><![CDATA[<p><font face="微软雅黑" size="7" color="#A52A2A">第一题</font><br>给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。<br>说明：每次只能向下或者向右移动一步。<br><img src="/images/DP3.jpg" alt="最小路径和"><br>链接：<a href="https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtcz3i/">https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtcz3i/</a>  </p><p><strong>思路</strong>大致和DP1的思想一致：<br>1、先定义状态f[m][n]<br>2、找出状态转移函数<br>ps.最重要的就是搞清楚<del>状态定义</del>！！f[m][n]意味着什么？f[m-1][n]又意味着什么？它们之间的关系为什么是这样？搞清楚状态定义基本上解决了这种题目。<br><em>比较简单，直接看代码吧</em></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token operator">=</span>grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//到(m+1,n+1)点的总长度</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">>=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                 <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font face="STCAIYUN" size="5" color="#DAA520">原作者宫水三叶的解析</font><br>作者希望通过「最小路径和」问题来分享如何进行「维度合并」来降低“出错风险”和“Debug 难度”。<br>这是 DP 问题中的一个常用技巧：通过「问题等价变换」来降低编码难度。<br><em>这道题也不难，为什么需要等价变换呢？</em><br>作者在进阶版中，输出了总和最低的路径，输出路径可以便于程序员以及参考代码者查看相关路径，便于debug<br>而原做法是<font color="#FF0000">顺序推导</font>的,那么在<em>寻找最短路径的过程中</em>，到不同节点的最短路径index也是<font color="#FF0000">顺序存储</font>的<br>但是由于最短路径<strong>可能多于1条</strong>，所以我们不能直接在存储路径index的数组顺序读取需要输出的路径<br>那么我们只能<font color="#FF0000">倒序读取</font>，而倒序读取必然需要新的数组存储数值，因为我们要正序输出<br>新的数组就会<strong>消耗更多空间</strong><br>因此，我们可以「问题等价变换」</p><hr><p>作者的解决办法：<br><font size="4">1、倒推</font><br>从终点倒推到起点<br><font size="4">2、信息存储</font><br>使用「一维数组」存储「二维信息」，这是一个常见的手段。<br>一维数组：idx的函数，我们可以通过函数得出idx的行和列<br>二维信息：路径点的行和列</p><p>由于之后还有类似的题目所以自己没有写输出路径的代码，以下是热心同学sheepice写的cpp代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//m代表行，n代表列</span> <span class="token keyword">int</span> <span class="token function">row</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//取得所在行 </span>    <span class="token keyword">return</span> idx <span class="token operator">/</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">col</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//取得所在列 </span>    <span class="token keyword">return</span> idx <span class="token operator">%</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">getidx</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//得到每一个一维坐标 </span>    <span class="token keyword">return</span> x <span class="token operator">*</span> n <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">grid</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vis</span><span class="token punctuation">(</span>m <span class="token operator">*</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//进行数组的输入； </span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cin <span class="token operator">>></span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//因为要进行路径的输出，因此我们的dp路径从后往前</span>    <span class="token comment" spellcheck="true">/*    //先进行初始化,但是这样的初始化是不适合找路径的，因为    并没有在这个初始化的过程中记录下来我们的最短路径     dp[m - 1][n - 1] = grid[m - 1][n - 1];    for(int i = m - 2; i >= 0; i--) {        dp[i][n - 1] = dp[i + 1][n - 1] + grid[i][n - 1];    }    for(int i = n - 2; i>=0; i--) {        dp[m - 1][i] = dp[m - 1][i + 1] + grid[m - 1][i];    }    */</span>        <span class="token comment" spellcheck="true">//开始进行从后往前的递推，并且推的过程记录下来我们的最短路径</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> bot <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> m <span class="token operator">?</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">:</span> INT_MAX<span class="token punctuation">;</span>                <span class="token keyword">int</span> rht <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">?</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> INT_MAX<span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bot<span class="token punctuation">,</span> rht<span class="token punctuation">)</span><span class="token punctuation">;</span>                vis<span class="token punctuation">[</span><span class="token function">getidx</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> bot <span class="token operator">&lt;</span> rht <span class="token operator">?</span> <span class="token function">getidx</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getidx</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getidx</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最短的路径为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> <span class="token function">row</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> <span class="token function">col</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")->"</span><span class="token punctuation">;</span>        idx <span class="token operator">=</span> vis<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> <span class="token function">row</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> <span class="token function">col</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span><span class="token string">"最短的路径和为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//作者：sheepice</span><span class="token comment" spellcheck="true">//链接：https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtb68e/?discussion=d2e6U2</span><span class="token comment" spellcheck="true">//来源：力扣（LeetCode）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font face="微软雅黑" size="7" color="#A52A2A">第二题</font><br>给定一个三角形 triangle ，找出自顶向下的最小路径和。<br>每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1<br><img src="/images/DP4.png" alt="最小路径和变形"><br><a href="https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtfiiv/">作者：宫水三叶，相关链接</a></p><hr><p><strong>初始思路</strong><br>1、使用dp[i][j]存储到[i][j]点的路径和<br>最终要求：i=m-1,j没有要求<br>在运动过程中j始终&lt;=i<br>2、使用二维数组f进行路径记录，f[index[dp]][line]<br>index[dp]表示哪一条路，line表示哪一层<br>不过由于路径多，如何唯一表示index？<br>能不能按累加定义index？<br>。。。<br>然后就卡住了<span class="github-emoji"><span>😅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。。</p><p>没办法了，仔细看了上一题的解析终于知道为什么从后往前推更方便。。。<br>因为只存储最短路径（1条）的idx<br>所以从后往前推，不然得先存在一个数组里再输出（浪费空间）。。<br>不过三角形怎么从idx推出在哪一行哪一列、、、<br>要不开一个一维数组存储三角形的值算了、、、tri<br>完蛋，还是不会记录，不过三角形倒推就没有正推的问题<br>因为从下往上是唯一的，从上往下是不唯一的<br>然后写出来了下面的东西</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> triangle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一维三角形数组的idx</span>        <span class="token keyword">int</span> line<span class="token operator">=</span>triangle<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tri<span class="token punctuation">[</span><span class="token punctuation">(</span>line<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>line<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>row<span class="token operator">&lt;</span>line<span class="token punctuation">;</span>row<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>col<span class="token operator">&lt;=</span>row<span class="token punctuation">;</span>col<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tri<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>triangle<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                idx<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//以上的最后没用上，是原来想输出路径（failed）写的</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>line<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>line<span class="token number">-1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token keyword">int</span> up<span class="token punctuation">,</span>ulft<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//up=(j!=i)?dp[i+1][j]+triangle[i][j]:INT_MAX;</span>                    <span class="token comment" spellcheck="true">//ulft=(j!=0)?dp[i+1][j+1]+triangle[i][j]:INT_MAX;</span>                    up<span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ulft<span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span>ulft<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后看评论，如何节约空间的方法：<br>因为对状态是如何转移不感兴趣，程序员在调试的时候感兴趣（debug）<br>由于用户不感兴趣，因此可以直接在原三角形上更改（？有点危险</p><hr><p>作者解析<br>本题是否可以使用DP解决，要分析<strong>有无后效性</strong><br>首先，既然是从上到下的路径，那么最后一个点必然是落在最后一行。<br>对于最后一行的某个位置的值，根据题意只能从上一行的<strong>某一个位置</strong>或者<strong>某两个位置之一</strong>转移而来。<br>同时，我们只关注前一位的累加值是多少，而不关心这个累加值结果是由什么路径而来的。<br>这显然就满足了「无后效性」的定义：我们转移某个状态需要用到某个值，但是并不关心该值是如何而来的。<br>更加的学术表达是：当前某个状态确定后，之后的状态转移与之前的决策无关</p><p>既然可以使用DP解决该问题，那么我们就需要定义「DP状态」： f[i][j]代表到达某个点的最小路径和<br>状态转移：<br>1、每一行 i 具有 i+1 个数字<br>2、只要不是第一列（j!=0）位置上的数，都能通过「左上方」转移过来<br>3、只要不是每行最后一列（j!=i）位置上的数，都能通过「上方」转移而来</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> tri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> tri<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tri<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> val <span class="token operator">=</span> tri<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> f<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><font size="5"><strong>进阶</strong></font><br>递推过程可以发现，在求第 i 行的状态时只依赖于第 i-1 行的状态。<br>那么我们不需要存储所有行的状态值（动规值），可以对空间进行优化。</p><table><tbody><tr><td bgcolor="#1E90FF">DP 空间优化技巧</td></tr></tbody></table>1、滚动数组2、根据状态依赖调整迭代/循环的方向**滚动数组**没有任何的思维难度，只需要将其中一维直接改成 2， 将维的 f[i] 改成 f[i&amp;1] 或者 f[i%2] 即可（推荐前者，在不同架构的机器上，运算效率更加稳定）。这样数组仅存储两行的内容，用完的数据就被覆盖掉```javaclass Solution {    public int minimumTotal(List<list<integer>&gt; tri) {        int n = tri.size();        int ans = Integer.MAX_VALUE;        int[][] f = new int[2][n];        f[0][0] = tri.get(0).get(0);        for (int i = 1; i &lt; n; i++) {            for (int j = 0; j &lt; i + 1; j++) {                int val = tri.get(i).get(j);                f[i &amp; 1][j] = Integer.MAX_VALUE;                if (j != 0) f[i &amp; 1][j] = Math.min(f[i &amp; 1][j], f[(i - 1) &amp; 1][j - 1] + val);                if (j != i) f[i &amp; 1][j] = Math.min(f[i &amp; 1][j], f[(i - 1) &amp; 1][j] + val);            }        }        for (int i = 0; i &lt; n; i++) ans = Math.min(ans, f[(n - 1) &amp; 1][i]);        return ans;    }}```</list<integer>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP Day1</title>
      <link href="/2022/09/06/DP-Day1/"/>
      <url>/2022/09/06/DP-Day1/</url>
      
        <content type="html"><![CDATA[<p><font face="微软雅黑" size="7" color="#A52A2A">第一题</font><br>一个机器人位于一个 m x n&nbsp;网格的左上角 （起始点在下图中标记为 “Start” ）<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。<br>问总共有多少条不同的路径？<br><img src="/images/DP1.png" alt="question"><br>链接：<a href="https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtwu06/">https://leetcode.cn/leetbook/read/path-problems-in-dynamic-programming/rtwu06/</a>  </p><p>初步的思路：3*7的地图，只能向右或者向下，总共走8步可以到终点，那么就要考虑右和下这两个动作在向量里的位置。<br>如下图所示，需要向右6步，向下2步，那么就计算2个下元素在向量中的位置（无序）。  </p><table><thead><tr><th>第一个“下”的位置</th><th>第二个“下”的可能</th></tr></thead><tbody><tr><td>0</td><td>7</td></tr><tr><td>1</td><td>6</td></tr><tr><td>2</td><td>5</td></tr><tr><td>。。</td><td>。。</td></tr><tr><td>6</td><td>1</td></tr></tbody></table><p>最后求和，得7*8/2=28<br><em><strong>不过这种思路很难找到通用的公式（哭）</strong></em>  </p><hr><p><strong>直接看解析！</strong><br>有人使用<strong>递归</strong>来解决，递归的关键是1.找到函数关系（把范围变小）2.找到递归结束条件<br>对于这道题来说，范围变小：每移动一步，地图就变小了  </p><p><em>本讲重要知识点</em><br><font face="微软雅黑" size="6" color="#006400">动态规划（DP）</font><br><strong>是什么？</strong>若要解一个给定问题，我们需要解其不同部分（即<strong>子问题</strong>），再<strong>合并子问题的解</strong>以得出原问题的解。通常许多子问题非常相似，为此动态规划法试图仅仅解决每个子问题一次，从而减少计算量： 一旦某个给定子问题的解已经算出，则将其<strong>记忆化存储</strong>，以便下次需要同一个子问题解之时直接查表。这种做法在重复子问题的数目关于输入的规模呈指数增长时特别有用。<br><strong>以下是作者宫水三叶对原题的分析</strong><br>定义 f[i][j]f[i][j] 为到达位置 (i,j)(i,j) 的不同路径数量。<br>那么 f[m-1][n-1]f[m−1][n−1] 就是我们最终的答案，而 f[0][0] = 1是一个显而易见的起始条件。<br>由于题目限定了我们只能<em>往下</em>或者<em>往右</em>移动，因此我们按照<strong>当前可选方向</strong>进行分析：<br>当前位置只能「往下」移动，即有 f[i][j] = f[i-1][j]<br>当前位置只能「往右」移动，即有 f[i][j] = f[i][j-1]<br>当前位置即能「往下」也能「往右」移动，即有 f[i][j] = f[i][j-1] + f[i-1][j]</p><hr><p><em>因为是好久没接触DP类型的题目，基本忘光，这里直接搬上作者对于这道题的总结</em>  </p><ol><li><p>我们是如何确定本题可以使用动态规划来解决的？<br>通常我们要从「有无后效性」进行入手分析。<br>如果对于某个状态，我们可以只关注状态的值，而不需要关注状态是如何转移过来的话，那么这就是一个无后效性的问题，可以考虑使用 DP 解决。<br>另外一个更加实在的技巧，我们还可以通过<em>数据范围</em>来猜测是不是可以用 DP来做。<br>因为DP是一个递推的过程，因此如果数据范围是 10^5~10^6 的话，可以考虑是不是可以使用一维 DP来解决；<br>如果数据范围是 10^2~10^3 的话，可以考虑是不是可以使用二维 DP 来做 …</p></li><li><p>我们是如何确定本题的状态定义的？<br>说实话，DP 的状态定义很大程度是靠经验去猜的。<br>虽然大多数情况都是猜的，但也不是毫无规律，相当一部分题目的状态定义是与「结尾」或「答案」有所关联</p></li><li><p>我们是如何确定状态转移方程的？<br>通常来说，如果我们的状态定义猜对了，状态转移方程就是对「最后一步的分情况讨论」。<br>如果我们有一个对的状态定义的话，基本上状态转移方程就是呼之欲出。<br>因此一定程度上，状态转移方程可以反过来验证我们状态定义猜得是否正确：<br>如果猜了一个状态定义，然后发现无法列出涵盖所有情况（不漏）的状态转移方程，多半就是状态定义猜错了，赶紧换个思路，而不是去死磕状态转移方程。</p></li><li><p>对状态转移的要求是什么？<br>我们的状态转移是要做到「不漏」还是「不重不漏」取决于问题本身：<br>如果是求最值的话，我们只需要确保「不漏」即可，因为重复不影响结果。<br>如果是求方案数的话，我们需要确保「不重不漏」。</p></li><li><p>我们是如何分析动态规划的时间复杂度的？<br>对于动态规划的复杂度/计算量分析，有多少个状态，复杂度/计算量就是多少。<br>因此一维DP的复杂度通常是线性的 O(n) ，而二维DP的复杂度通常是平方的 O(n^2)。</p></li></ol><hr><p><font face="微软雅黑" size="6" color="#A52A2A">第二题</font><br>一个机器人位于一个&nbsp;m x n&nbsp;网格的左上角 （起始点在下图中标记为 “Start” ）。<br>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。<br>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？<br>网格中的障碍物和空位置分别用 1 和 0 来表示。<br><img src="/images/DP2.jpg" alt="question2">  </p><p>第二题是对第一题的巩固，就自己按第一题的思路做了一下。<br>以下是自己写的代码，注释是当时的思路和错误的地方：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> obstacleGrid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> obstacleGrid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//memset(f,-1,sizeof(f));//加不加对编译没有影响，但不初始化很危险</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//漏初始条件</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右，注意条件，j=0表示只能向右</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span>m<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//f[i][j]:</span><span class="token comment" spellcheck="true">//1,o[i-1][j]=1--f[i][j]=f[i][j-1]</span><span class="token comment" spellcheck="true">//2,o[i][j-1]=1--f[i][j]=f[i-1][j]</span><span class="token comment" spellcheck="true">//3,o[i-1][j-1]=0--f[i][j]=f[i][j-1]+f[i-1][j]</span><span class="token comment" spellcheck="true">//4,o[i-1][j-1]=1--f[i][j]=0</span><span class="token comment" spellcheck="true">//一开始的构思，漏洞百出。。。</span><span class="token comment" spellcheck="true">//注意vector的格式，二维数组初始化</span><span class="token comment" spellcheck="true">//一定要清晰定义f[m][n]</span><span class="token comment" spellcheck="true">//当前的状态去推导下一时刻状态，因此不管怎么样等式右边都是x-m（表示过去）的形式，等式左边就是x（当前）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> C++ </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>累了就休息一下，看一点人间喜剧</title>
      <link href="/2022/09/04/%E7%B4%AF%E4%BA%86%E5%B0%B1%E4%BC%91%E6%81%AF%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%9C%8B%E4%B8%80%E7%82%B9%E4%BA%BA%E9%97%B4%E5%96%9C%E5%89%A7/"/>
      <url>/2022/09/04/%E7%B4%AF%E4%BA%86%E5%B0%B1%E4%BC%91%E6%81%AF%E4%B8%80%E4%B8%8B%EF%BC%8C%E7%9C%8B%E4%B8%80%E7%82%B9%E4%BA%BA%E9%97%B4%E5%96%9C%E5%89%A7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.douban.com/group/topic/220795011/?_i=622889837471b5d&amp;dt_dapp=1">叔叔你别拉了，我害怕</a><br>推荐理由：作者语言描述能力惊人，画面感十足</p><p><a href="https://www.douban.com/group/topic/263019480/?_i=627354628775935&amp;dt_dapp=1">封校期间在QQ上被QQ自动回复社死</a><br>推荐理由：很有意思的自动回复格式，激发没有幽默感的我的灵感</p><p><a href="https://www.douban.com/group/topic/266612983/?_i=62735200bbb8f76&amp;dt_dapp=1">没想到被一个<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>尬住了</a><br>推荐理由：。。。。sorry因为这颗<span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>我笑出了眼泪</p><p><a href="https://www.douban.com/group/topic/269915014/?_i=62737868e16e5d9&amp;dt_dapp=1">失手把狗狗照片发进工作群，而工作群正在。。。</a><br>推荐理由：what a coincidence</p><p><a href="https://www.douban.com/group/topic/212927406/?_i=632431468dfb472&amp;dt_dapp=1">为了吵架更有气势改名字，结果打错了字</a><br>推荐理由：豆瓣的提示，蛮有意思的，正经中带着一丝丝粗鲁</p><p><a href="https://www.douban.com/group/topic/211953297/?_i=632431948dfb472&amp;dt_dapp=1">朋友误以为我买了gang塞</a><br>推荐理由：本来以为不喜欢这种段子，没想到被lz的朋友温暖到了<span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 乐一乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社死 </tag>
            
            <tag> 豆瓣 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
